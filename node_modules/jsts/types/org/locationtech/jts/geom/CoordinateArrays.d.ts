declare class CoordinateArrays {
    static scroll(coordinates: any, firstCoordinate: any): any;
    static removeRepeatedPoints(coord: any): any;
    static reverse(coord: any): void;
    static removeNull(coord: any): any;
    static copyDeep(...args: any[]): any;
    static isEqualReversed(pts1: any, pts2: any): boolean;
    static envelope(coordinates: any): Envelope;
    static extract(pts: any, start: any, end: any): any;
    static isRing(pts: any): boolean;
    static ptNotInList(testPts: any, pts: any): any;
    static equals(...args: any[]): boolean;
    static intersection(coordinates: any, env: any): any;
    static measures(pts: any): number;
    static hasRepeatedPoints(coord: any): boolean;
    static toCoordinateArray(coordList: any): any;
    static dimension(pts: any): number;
    static atLeastNCoordinatesOrNothing(n: any, c: any): any;
    static indexOf(coordinate: any, coordinates: any): number;
    static increasingDirection(pts: any): any;
    static compare(pts1: any, pts2: any): any;
    static minCoordinate(coordinates: any): any;
}
declare namespace CoordinateArrays {
    export { ForwardComparator };
    export { BidirectionalComparator };
    export let coordArrayType: any;
}
export default CoordinateArrays;
import Envelope from './Envelope.js';
declare class ForwardComparator {
    compare(o1: any, o2: any): any;
    get interfaces_(): (typeof Comparator)[];
}
declare class BidirectionalComparator {
    compare(o1: any, o2: any): any;
    OLDcompare(o1: any, o2: any): any;
    get interfaces_(): (typeof Comparator)[];
}
import Comparator from '../../../../java/util/Comparator.js';
