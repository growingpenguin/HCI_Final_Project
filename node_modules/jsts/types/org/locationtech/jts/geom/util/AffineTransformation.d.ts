export default class AffineTransformation {
    static constructor_(...args: any[]): void;
    static translationInstance(x: any, y: any): AffineTransformation;
    static shearInstance(xShear: any, yShear: any): AffineTransformation;
    static reflectionInstance(...args: any[]): AffineTransformation;
    static rotationInstance(...args: any[]): any;
    static scaleInstance(...args: any[]): AffineTransformation;
    constructor(...args: any[]);
    setToReflectionBasic(x0: any, y0: any, x1: any, y1: any): this;
    _m00: any;
    _m01: any;
    _m02: any;
    _m10: any;
    _m11: any;
    _m12: any;
    setToRotation(...args: any[]): this;
    getMatrixEntries(): any[];
    filter(seq: any, i: any): void;
    composeBefore(trans: any): this;
    clone(): any;
    translate(x: any, y: any): this;
    setToReflection(...args: any[]): this;
    shear(xShear: any, yShear: any): this;
    getInverse(): AffineTransformation;
    compose(trans: any): this;
    equals(obj: any): boolean;
    setToScale(xScale: any, yScale: any): this;
    isIdentity(): boolean;
    scale(xScale: any, yScale: any): this;
    setToIdentity(): this;
    isGeometryChanged(): boolean;
    setTransformation(...args: any[]): this;
    rotate(...args: any[]): this;
    getDeterminant(): number;
    setToShear(xShear: any, yShear: any): this;
    isDone(): boolean;
    toString(): string;
    setToTranslation(dx: any, dy: any): this;
    transform(...args: any[]): any;
    reflect(...args: any[]): this;
    get interfaces_(): (typeof Cloneable | typeof CoordinateSequenceFilter)[];
}
import Cloneable from '../../../../../java/lang/Cloneable.js';
import CoordinateSequenceFilter from '../CoordinateSequenceFilter.js';
