declare class Coordinate {
    static constructor_(...args: any[]): void;
    static hashCode(n: any): number;
    constructor(...args: any[]);
    equals2D(...args: any[]): boolean;
    setM(m: any): void;
    equals3D(other: any): any;
    setX(x: any): void;
    x: any;
    compareTo(o: any): 1 | -1 | 0;
    getX(): any;
    copy(): Coordinate;
    toString(): string;
    distance3D(c: any): number;
    getY(): any;
    getM(): number;
    setOrdinate(ordinateIndex: any, value: any): void;
    y: any;
    getZ(): any;
    getOrdinate(ordinateIndex: any): any;
    equals(other: any): boolean;
    equalInZ(c: any, tolerance: any): boolean;
    setZ(z: any): void;
    z: any;
    clone(): any;
    setY(y: any): void;
    distance(c: any): number;
    hashCode(): number;
    setCoordinate(other: any): void;
    get interfaces_(): (typeof Comparable)[];
}
declare namespace Coordinate {
    export let x: any;
    export let y: any;
    export let z: any;
    export { DimensionalComparator };
    export let NULL_ORDINATE: number;
    export let X: number;
    export let Y: number;
    export let Z: number;
    export let M: number;
}
export default Coordinate;
import Comparable from '../../../../java/lang/Comparable.js';
declare class DimensionalComparator {
    static constructor_(...args: any[]): void;
    static compare(a: any, b: any): 1 | -1 | 0;
    constructor(...args: any[]);
    compare(c1: any, c2: any): 1 | -1 | 0;
    get interfaces_(): (typeof Comparator)[];
}
import Comparator from '../../../../java/util/Comparator.js';
