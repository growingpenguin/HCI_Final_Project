declare class PrecisionModel {
    static constructor_(...args: any[]): void;
    static mostPrecise(pm1: any, pm2: any): any;
    constructor(...args: any[]);
    equals(other: any): boolean;
    compareTo(o: any): 1 | -1 | 0;
    getType(): any;
    toString(): string;
    makePrecise(...args: any[]): number;
    getMaximumSignificantDigits(): number;
    setScale(scale: any): void;
    _scale: number;
    getScale(): number;
    isFloating(): boolean;
    get interfaces_(): (typeof Comparable)[];
}
declare namespace PrecisionModel {
    export let _modelType: any;
    export let _scale: number;
    export { Type };
    export let FIXED: Type;
    export let FLOATING: Type;
    export let FLOATING_SINGLE: Type;
    export let maximumPreciseValue: number;
}
export default PrecisionModel;
import Comparable from '../../../../java/lang/Comparable.js';
declare class Type {
    static constructor_(...args: any[]): void;
    constructor(...args: any[]);
    readResolve(): any;
    toString(): any;
    get interfaces_(): (typeof Serializable)[];
}
declare namespace Type {
    let _name: any;
    let nameToTypeMap: HashMap;
}
import Serializable from '../../../../java/io/Serializable.js';
import HashMap from '../../../../java/util/HashMap.js';
