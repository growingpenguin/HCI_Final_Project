declare class OctagonalEnvelope {
    static constructor_(...args: any[]): void;
    static computeB(x: any, y: any): number;
    static computeA(x: any, y: any): any;
    static octagonalEnvelope(geom: any): any;
    constructor(...args: any[]);
    toGeometry(geomFactory: any): any;
    getMinA(): any;
    getMaxB(): any;
    isValid(): boolean;
    getMinX(): any;
    expandToInclude(...args: any[]): this;
    _minX: any;
    _maxX: any;
    _minY: any;
    _maxY: any;
    _minA: any;
    _maxA: any;
    _minB: any;
    _maxB: any;
    getMinB(): any;
    setToNull(): void;
    expandBy(distance: any): any;
    getMaxY(): any;
    isNull(): any;
    getMaxX(): any;
    intersects(...args: any[]): boolean;
    getMinY(): any;
    getMaxA(): any;
    contains(other: any): boolean;
}
declare namespace OctagonalEnvelope {
    export let _minX: number;
    export let _maxX: any;
    export let _minY: any;
    export let _maxY: any;
    export let _minA: any;
    export let _maxA: any;
    export let _minB: any;
    export let _maxB: any;
    export { BoundingOctagonComponentFilter };
    export let SQRT2: number;
}
export default OctagonalEnvelope;
declare class BoundingOctagonComponentFilter {
    static constructor_(...args: any[]): void;
    constructor(...args: any[]);
    filter(geom: any): void;
    get interfaces_(): (typeof GeometryComponentFilter)[];
}
import GeometryComponentFilter from './GeometryComponentFilter.js';
