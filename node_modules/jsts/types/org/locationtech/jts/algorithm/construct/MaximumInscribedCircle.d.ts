declare class MaximumInscribedCircle {
    static constructor_(...args: any[]): void;
    static getCenter(polygonal: any, tolerance: any): any;
    static getRadiusLine(polygonal: any, tolerance: any): any;
    constructor(...args: any[]);
    distanceToBoundary(...args: any[]): any;
    getRadiusLine(): any;
    createCentroidCell(geom: any): Cell;
    getCenter(): any;
    createCell(x: any, y: any, hSide: any): Cell;
    createInitialGrid(env: any, cellQueue: any): void;
    compute(): any;
    _centerCell: Cell;
    _centerPt: Coordinate;
    _centerPoint: any;
    _radiusPt: any;
    _radiusPoint: any;
    getRadiusPoint(): any;
}
declare namespace MaximumInscribedCircle {
    export let _inputGeom: MultiPolygon | Polygon;
    export let _tolerance: any;
    export let _factory: any;
    export let _ptLocater: IndexedPointInAreaLocator;
    export let _indexedDistance: IndexedFacetDistance;
    export let _centerCell: any;
    export let _centerPt: any;
    export let _radiusPt: any;
    export let _centerPoint: any;
    export let _radiusPoint: any;
    export { Cell };
}
export default MaximumInscribedCircle;
declare class Cell {
    static constructor_(...args: any[]): void;
    constructor(...args: any[]);
    getHSide(): any;
    compareTo(o: any): any;
    getEnvelope(): Envelope;
    getDistance(): any;
    getY(): any;
    getX(): any;
    getMaxDistance(): any;
    get interfaces_(): (typeof Comparable)[];
}
declare namespace Cell {
    let _x: any;
    let _y: any;
    let _hSide: any;
    let _distance: any;
    let _maxDist: any;
    let SQRT2: number;
}
import Coordinate from '../../geom/Coordinate.js';
import MultiPolygon from '../../geom/MultiPolygon.js';
import Polygon from '../../geom/Polygon.js';
import IndexedPointInAreaLocator from '../locate/IndexedPointInAreaLocator.js';
import IndexedFacetDistance from '../../operation/distance/IndexedFacetDistance.js';
import Envelope from '../../geom/Envelope.js';
import Comparable from '../../../../../java/lang/Comparable.js';
