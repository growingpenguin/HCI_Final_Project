declare class LargestEmptyCircle {
    static constructor_(...args: any[]): void;
    static getCenter(obstacles: any, tolerance: any): any;
    static getRadiusLine(obstacles: any, tolerance: any): any;
    constructor(...args: any[]);
    getRadiusLine(): any;
    createCentroidCell(geom: any): Cell;
    getCenter(): any;
    createCell(x: any, y: any, h: any): Cell;
    createInitialGrid(env: any, cellQueue: any): void;
    setBoundary(obstacles: any): void;
    _boundary: any;
    _ptLocater: IndexedPointInAreaLocator;
    _boundaryDistance: IndexedFacetDistance;
    compute(): any;
    _centerPt: any;
    _centerPoint: any;
    _radiusPt: any;
    _radiusPoint: any;
    _farthestCell: any;
    _centerCell: any;
    getRadiusPoint(): any;
    distanceToConstraints(...args: any[]): any;
    mayContainCircleCenter(cell: any): boolean;
}
declare namespace LargestEmptyCircle {
    export let _obstacles: any;
    export let _tolerance: any;
    export let _factory: any;
    export let _boundary: any;
    export let _ptLocater: any;
    export let _obstacleDistance: IndexedFacetDistance;
    export let _boundaryDistance: any;
    export let _farthestCell: any;
    export let _centerCell: any;
    export let _centerPt: any;
    export let _centerPoint: any;
    export let _radiusPt: any;
    export let _radiusPoint: any;
    export { Cell };
}
export default LargestEmptyCircle;
declare class Cell {
    static constructor_(...args: any[]): void;
    constructor(...args: any[]);
    getHSide(): any;
    compareTo(o: any): any;
    getDistance(): any;
    isFullyOutside(): boolean;
    getX(): any;
    getMaxDistance(): any;
    isOutside(): boolean;
    getY(): any;
    get interfaces_(): (typeof Comparable)[];
}
declare namespace Cell {
    let _x: any;
    let _y: any;
    let _hSide: any;
    let _distance: any;
    let _maxDist: any;
    let SQRT2: number;
}
import IndexedPointInAreaLocator from '../locate/IndexedPointInAreaLocator.js';
import IndexedFacetDistance from '../../operation/distance/IndexedFacetDistance.js';
import Comparable from '../../../../../java/lang/Comparable.js';
