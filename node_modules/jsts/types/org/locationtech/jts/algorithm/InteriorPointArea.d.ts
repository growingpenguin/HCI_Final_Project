declare class InteriorPointArea {
    static constructor_(...args: any[]): void;
    static avg(a: any, b: any): number;
    static getInteriorPoint(geom: any): Coordinate;
    constructor(...args: any[]);
    process(geom: any): any;
    getInteriorPoint(): Coordinate;
    processPolygon(polygon: any): void;
    _maxWidth: number;
    _interiorPoint: Coordinate;
}
declare namespace InteriorPointArea {
    export let _interiorPoint: any;
    export let _maxWidth: number;
    export { InteriorPointPolygon };
    export { ScanLineYOrdinateFinder };
}
export default InteriorPointArea;
import Coordinate from '../geom/Coordinate.js';
declare class InteriorPointPolygon {
    static constructor_(...args: any[]): void;
    static isEdgeCrossingCounted(p0: any, p1: any, scanY: any): boolean;
    static intersectsHorizontalLine(...args: any[]): boolean;
    static intersection(p0: any, p1: any, Y: any): any;
    constructor(...args: any[]);
    findBestMidpoint(crossings: any): any;
    _interiorSectionWidth: number;
    _interiorPoint: Coordinate;
    getWidth(): number;
    getInteriorPoint(): Coordinate;
    addEdgeCrossing(p0: any, p1: any, scanY: any, crossings: any): any;
    process(): any;
    scanRing(ring: any, crossings: any): any;
}
declare namespace InteriorPointPolygon {
    export let _polygon: any;
    export let _interiorPointY: number;
    export let _interiorSectionWidth: number;
    let _interiorPoint_1: any;
    export { _interiorPoint_1 as _interiorPoint };
    export { DoubleComparator };
}
declare class ScanLineYOrdinateFinder {
    static constructor_(...args: any[]): void;
    static getScanLineY(poly: any): number;
    constructor(...args: any[]);
    process(line: any): void;
    getScanLineY(): number;
    updateInterval(y: any): void;
    _loY: any;
    _hiY: any;
}
declare class DoubleComparator {
    compare(v1: any, v2: any): 1 | -1 | 0;
    get interfaces_(): (typeof Comparator)[];
}
import Comparator from '../../../../java/util/Comparator.js';
