declare class DiscreteHausdorffDistance {
    static constructor_(...args: any[]): void;
    static distance(...args: any[]): any;
    constructor(...args: any[]);
    getCoordinates(): any;
    setDensifyFraction(densifyFrac: any): void;
    _densifyFrac: any;
    compute(g0: any, g1: any): void;
    distance(): any;
    computeOrientedDistance(discreteGeom: any, geom: any, ptDist: any): void;
    orientedDistance(): any;
}
declare namespace DiscreteHausdorffDistance {
    export let _g0: any;
    export let _g1: any;
    export let _ptDist: PointPairDistance;
    export let _densifyFrac: number;
    export { MaxPointDistanceFilter };
    export { MaxDensifiedByFractionDistanceFilter };
}
export default DiscreteHausdorffDistance;
import PointPairDistance from './PointPairDistance.js';
declare class MaxPointDistanceFilter {
    static constructor_(...args: any[]): void;
    constructor(...args: any[]);
    filter(pt: any): void;
    getMaxPointDistance(): any;
    get interfaces_(): (typeof CoordinateFilter)[];
}
declare class MaxDensifiedByFractionDistanceFilter {
    static constructor_(...args: any[]): void;
    constructor(...args: any[]);
    filter(seq: any, index: any): any;
    isGeometryChanged(): boolean;
    getMaxPointDistance(): any;
    isDone(): boolean;
    get interfaces_(): (typeof CoordinateSequenceFilter)[];
}
import CoordinateFilter from '../../geom/CoordinateFilter.js';
import CoordinateSequenceFilter from '../../geom/CoordinateSequenceFilter.js';
