declare class LineIntersector {
    static constructor_(): void;
    static nonRobustComputeEdgeDistance(p: any, p1: any, p2: any): number;
    static computeEdgeDistance(p: any, p0: any, p1: any): number;
    constructor(...args: any[]);
    computeIntersection(p1: any, p2: any, p3: any, p4: any): void;
    _result: any;
    getIntersectionNum(): any;
    computeIntLineIndex(...args: any[]): void;
    _intLineIndex: any;
    isInteriorIntersection(...args: any[]): boolean;
    getIntersection(intIndex: any): any;
    getEdgeDistance(segmentIndex: any, intIndex: any): number;
    isCollinear(): boolean;
    toString(): string;
    getEndpoint(segmentIndex: any, ptIndex: any): any;
    getIndexAlongSegment(segmentIndex: any, intIndex: any): any;
    getTopologySummary(): any;
    isProper(): any;
    setPrecisionModel(precisionModel: any): void;
    _precisionModel: any;
    isEndPoint(): boolean;
    hasIntersection(): boolean;
    isIntersection(pt: any): boolean;
    getIntersectionAlongSegment(segmentIndex: any, intIndex: any): any;
}
declare namespace LineIntersector {
    let _result: number;
    let _inputLines: any;
    let _intPt: any;
    let _intLineIndex: any;
    let _isProper: any;
    let _pa: any;
    let _pb: any;
    let _precisionModel: any;
    let DONT_INTERSECT: number;
    let DO_INTERSECT: number;
    let COLLINEAR: number;
    let NO_INTERSECTION: number;
    let POINT_INTERSECTION: number;
    let COLLINEAR_INTERSECTION: number;
}
export default LineIntersector;
