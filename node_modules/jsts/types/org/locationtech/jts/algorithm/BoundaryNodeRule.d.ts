declare class BoundaryNodeRule {
    isInBoundary(boundaryCount: any): void;
}
declare namespace BoundaryNodeRule {
    export { Mod2BoundaryNodeRule };
    export { EndPointBoundaryNodeRule };
    export { MultiValentEndPointBoundaryNodeRule };
    export { MonoValentEndPointBoundaryNodeRule };
    export let MOD2_BOUNDARY_RULE: Mod2BoundaryNodeRule;
    export let ENDPOINT_BOUNDARY_RULE: EndPointBoundaryNodeRule;
    export let MULTIVALENT_ENDPOINT_BOUNDARY_RULE: MultiValentEndPointBoundaryNodeRule;
    export let MONOVALENT_ENDPOINT_BOUNDARY_RULE: MonoValentEndPointBoundaryNodeRule;
    import OGC_SFS_BOUNDARY_RULE = MOD2_BOUNDARY_RULE;
    export { OGC_SFS_BOUNDARY_RULE };
}
export default BoundaryNodeRule;
declare class Mod2BoundaryNodeRule {
    isInBoundary(boundaryCount: any): boolean;
    get interfaces_(): (typeof BoundaryNodeRule)[];
}
declare class EndPointBoundaryNodeRule {
    isInBoundary(boundaryCount: any): boolean;
    get interfaces_(): (typeof BoundaryNodeRule)[];
}
declare class MultiValentEndPointBoundaryNodeRule {
    isInBoundary(boundaryCount: any): boolean;
    get interfaces_(): (typeof BoundaryNodeRule)[];
}
declare class MonoValentEndPointBoundaryNodeRule {
    isInBoundary(boundaryCount: any): boolean;
    get interfaces_(): (typeof BoundaryNodeRule)[];
}
