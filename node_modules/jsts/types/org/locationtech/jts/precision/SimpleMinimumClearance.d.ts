declare class SimpleMinimumClearance {
    static constructor_(...args: any[]): void;
    static getDistance(g: any): any;
    static getLine(g: any): any;
    constructor(...args: any[]);
    getDistance(): any;
    compute(): any;
    _minClearancePts: any;
    _minClearance: any;
    updateClearance(...args: any[]): void;
    getLine(): any;
}
declare namespace SimpleMinimumClearance {
    export let _inputGeom: any;
    export let _minClearance: any;
    export let _minClearancePts: any;
    export { VertexCoordinateFilter };
    export { ComputeMCCoordinateSequenceFilter };
}
export default SimpleMinimumClearance;
declare class VertexCoordinateFilter {
    static constructor_(...args: any[]): void;
    constructor(...args: any[]);
    filter(coord: any): void;
    get interfaces_(): (typeof CoordinateFilter)[];
}
declare class ComputeMCCoordinateSequenceFilter {
    static constructor_(...args: any[]): void;
    constructor(...args: any[]);
    filter(seq: any, i: any): void;
    checkSegmentDistance(seg0: any, seg1: any): any;
    isDone(): boolean;
    isGeometryChanged(): boolean;
    checkVertexDistance(vertex: any): void;
    get interfaces_(): (typeof CoordinateSequenceFilter)[];
}
import CoordinateFilter from '../geom/CoordinateFilter.js';
import CoordinateSequenceFilter from '../geom/CoordinateSequenceFilter.js';
