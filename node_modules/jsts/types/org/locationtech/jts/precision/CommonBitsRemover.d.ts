declare class CommonBitsRemover {
    static constructor_(): void;
    constructor(...args: any[]);
    add(geom: any): void;
    _commonCoord: any;
    removeCommonBits(geom: any): any;
    addCommonBits(geom: any): void;
    getCommonCoordinate(): any;
}
declare namespace CommonBitsRemover {
    export let _commonCoord: any;
    export let _ccFilter: CommonCoordinateFilter;
    export { CommonCoordinateFilter };
    export { Translater };
}
export default CommonBitsRemover;
declare class CommonCoordinateFilter {
    static constructor_(): void;
    constructor(...args: any[]);
    filter(coord: any): void;
    getCommonCoordinate(): Coordinate;
    get interfaces_(): (typeof CoordinateFilter)[];
}
declare class Translater {
    static constructor_(...args: any[]): void;
    constructor(...args: any[]);
    filter(seq: any, i: any): void;
    isGeometryChanged(): boolean;
    isDone(): boolean;
    get interfaces_(): (typeof CoordinateSequenceFilter)[];
}
import Coordinate from '../geom/Coordinate.js';
import CoordinateFilter from '../geom/CoordinateFilter.js';
import CoordinateSequenceFilter from '../geom/CoordinateSequenceFilter.js';
