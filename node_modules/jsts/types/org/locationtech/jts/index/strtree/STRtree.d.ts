declare class STRtree extends AbstractSTRtree {
    static getItems(kNearestNeighbors: any): any;
    static avg(a: any, b: any): number;
    static centreY(e: any): number;
    static centreX(e: any): number;
    insert(...args: any[]): any;
    getIntersectsOp(): {
        readonly interfaces_: any[];
        intersects(aBounds: any, bBounds: any): any;
    };
    verticalSlices(childBoundables: any, sliceCount: any): any;
    query(...args: any[]): any;
    getComparator(): {
        readonly interfaces_: (typeof Comparator)[];
        compare(o1: any, o2: any): 1 | -1 | 0;
    };
    createParentBoundablesFromVerticalSlice(childBoundables: any, newLevel: any): any;
    nearestNeighbour(...args: any[]): any;
    isWithinDistance(...args: any[]): any;
    createParentBoundablesFromVerticalSlices(verticalSlices: any, newLevel: any): ArrayList;
    nearestNeighbourK(...args: any[]): any;
    createNode(level: any): STRtreeNode;
    get interfaces_(): (typeof Serializable | typeof SpatialIndex)[];
}
declare namespace STRtree {
    export { STRtreeNode };
    export let xComparator: {
        readonly interfaces_: (typeof Comparator)[];
        compare(o1: any, o2: any): 1 | -1 | 0;
    };
    export let yComparator: {
        readonly interfaces_: (typeof Comparator)[];
        compare(o1: any, o2: any): 1 | -1 | 0;
    };
    export let intersectsOp: {
        readonly interfaces_: any[];
        intersects(aBounds: any, bBounds: any): any;
    };
    export let DEFAULT_NODE_CAPACITY: number;
}
export default STRtree;
import AbstractSTRtree from './AbstractSTRtree.js';
import Comparator from '../../../../../java/util/Comparator.js';
import ArrayList from '../../../../../java/util/ArrayList.js';
declare class STRtreeNode extends AbstractNode {
    computeBounds(): Envelope;
}
import Serializable from '../../../../../java/io/Serializable.js';
import SpatialIndex from '../SpatialIndex.js';
import AbstractNode from './AbstractNode.js';
import Envelope from '../../geom/Envelope.js';
