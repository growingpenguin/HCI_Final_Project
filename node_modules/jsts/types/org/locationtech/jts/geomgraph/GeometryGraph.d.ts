export default class GeometryGraph extends PlanarGraph {
    static determineBoundary(boundaryNodeRule: any, boundaryCount: any): number;
    insertBoundaryPoint(argIndex: any, coord: any): void;
    computeSelfNodes(...args: any[]): any;
    addPolygon(p: any): void;
    addEdge(e: any): void;
    addLineString(line: any): any;
    _hasTooFewPoints: boolean;
    _invalidPoint: any;
    getInvalidPoint(): any;
    getBoundaryPoints(): any;
    addSelfIntersectionNodes(argIndex: any): void;
    add(...args: any[]): any;
    _useBoundaryDeterminationRule: boolean;
    addCollection(gc: any): void;
    locate(pt: any): any;
    _areaPtLocator: IndexedPointInAreaLocator;
    findEdge(...args: any[]): any;
    computeSplitEdges(edgelist: any): void;
    computeEdgeIntersections(g: any, li: any, includeProper: any): SegmentIntersector;
    getGeometry(): any;
    getBoundaryNodeRule(): any;
    hasTooFewPoints(): boolean;
    addPoint(...args: any[]): void;
    getBoundaryNodes(): any;
    _boundaryNodes: any;
    addSelfIntersectionNode(argIndex: any, coord: any, loc: any): any;
    addPolygonRing(lr: any, cwLeft: any, cwRight: any): any;
    insertPoint(argIndex: any, coord: any, onLocation: any): void;
    createEdgeSetIntersector(): SimpleMCSweepLineIntersector;
}
import PlanarGraph from './PlanarGraph.js';
import IndexedPointInAreaLocator from '../algorithm/locate/IndexedPointInAreaLocator.js';
import SegmentIntersector from './index/SegmentIntersector.js';
import SimpleMCSweepLineIntersector from './index/SimpleMCSweepLineIntersector.js';
