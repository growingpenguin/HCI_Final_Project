declare class DD {
    static constructor_(...args: any[]): void;
    static determinant(...args: any[]): any;
    static sqr(x: any): any;
    static valueOf(...args: any[]): DD;
    static sqrt(x: any): any;
    static parse(str: any): DD;
    static createNaN(): DD;
    static copy(dd: any): DD;
    static magnitude(x: any): any;
    static stringOfChar(ch: any, len: any): any;
    constructor(...args: any[]);
    le(y: any): boolean;
    extractSignificantDigits(insertDecimalPoint: any, magnitude: any): any;
    sqr(): any;
    getSpecialNumberString(): "0.0" | "NaN ";
    setValue(...args: any[]): this;
    multiply(...args: any[]): any;
    isNaN(): any;
    reciprocal(): DD;
    doubleValue(): any;
    subtract(...args: any[]): any;
    equals(...args: any[]): boolean;
    isZero(): boolean;
    selfSubtract(...args: any[]): any;
    min(x: any): any;
    selfDivide(...args: any[]): any;
    _hi: any;
    _lo: any;
    dump(): string;
    divide(...args: any[]): any;
    ge(y: any): boolean;
    pow(exp: any): DD;
    ceil(): DD;
    compareTo(o: any): 1 | -1 | 0;
    rint(): any;
    max(x: any): any;
    sqrt(): any;
    selfAdd(...args: any[]): any;
    selfMultiply(...args: any[]): any;
    selfSqr(): any;
    floor(): DD;
    negate(): DD;
    clone(): any;
    intValue(): any;
    toString(): any;
    toStandardNotation(): any;
    toSciNotation(): string;
    abs(): DD;
    isPositive(): boolean;
    lt(y: any): boolean;
    add(...args: any[]): any;
    init(...args: any[]): void;
    gt(y: any): boolean;
    isNegative(): boolean;
    trunc(): DD;
    signum(): 1 | -1 | 0;
    get interfaces_(): (typeof Comparable)[];
}
declare namespace DD {
    let _hi: number;
    let _lo: number;
    let PI: DD;
    let TWO_PI: DD;
    let PI_2: DD;
    let E: DD;
    let NaN: DD;
    let EPS: number;
    let SPLIT: number;
    let MAX_PRINT_DIGITS: number;
    let TEN: DD;
    let ONE: DD;
    let SCI_NOT_EXPONENT_CHAR: string;
    let SCI_NOT_ZERO: string;
}
export default DD;
import Comparable from '../../../../java/lang/Comparable.js';
