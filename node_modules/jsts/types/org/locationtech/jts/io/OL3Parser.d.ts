export default class OL3Parser {
    /**
     * OpenLayers Geometry parser and writer
     * @param {GeometryFactory} geometryFactory
     * @param {ol} olReference
     */
    constructor(geometryFactory: GeometryFactory, olReference: ol);
    geometryFactory: GeometryFactory;
    ol: any;
    /**
     * Inject OpenLayers geom classes
     */
    inject(Point: any, LineString: any, LinearRing: any, Polygon: any, MultiPoint: any, MultiLineString: any, MultiPolygon: any, GeometryCollection: any): void;
    /**
     * @param geometry {ol.geom.Geometry}
     * @return {Geometry}
     * @memberof module:org/locationtech/jts/io/OL3Parser#
     */
    read(geometry: ol.geom.Geometry): Geometry;
    convertFromPoint(point: any): any;
    convertFromLineString(lineString: any): any;
    convertFromLinearRing(linearRing: any): any;
    convertFromPolygon(polygon: any): any;
    convertFromMultiPoint(multiPoint: any): any;
    convertFromMultiLineString(multiLineString: any): import("../geom.js").MultiLineString;
    convertFromMultiPolygon(multiPolygon: any): import("../geom.js").MultiPolygon;
    convertFromCollection(collection: any): import("../geom.js").GeometryCollection;
    /**
     * @param geometry
     *          {Geometry}
     * @return {ol.geom.Geometry}
     * @memberof module:org/locationtech/jts/io/OL3Parser#
     */
    write(geometry: Geometry): ol.geom.Geometry;
    convertToPoint(coordinate: any): any;
    convertToLineString(lineString: any): any;
    convertToLinearRing(linearRing: any): any;
    convertToPolygon(polygon: any): any;
    convertToMultiPoint(multiPoint: any): any;
    convertToMultiLineString(multiLineString: any): any;
    convertToMultiPolygon(multiPolygon: any): any;
    convertToCollection(geometryCollection: any): any;
}
import GeometryFactory from '../geom/GeometryFactory.js';
