export default class IsValidOp {
    static constructor_(...args: any[]): void;
    static findPtNotNode(testCoords: any, searchRing: any, graph: any): any;
    static isValid(...args: any[]): boolean;
    constructor(...args: any[]);
    checkInvalidCoordinates(...args: any[]): any;
    _validErr: TopologyValidationError;
    checkHolesNotNested(p: any, graph: any): any;
    checkConsistentArea(graph: any): any;
    isValid(): boolean;
    checkShellInsideHole(shell: any, hole: any, graph: any): any;
    checkNoSelfIntersectingRings(graph: any): any;
    checkHolesInShell(p: any, graph: any): any;
    checkShellNotNested(shell: any, p: any, graph: any): any;
    checkClosedRings(poly: any): any;
    checkConnectedInteriors(graph: any): void;
    checkNoSelfIntersectingRing(eiList: any): any;
    checkTooFewPoints(graph: any): any;
    getValidationError(): TopologyValidationError;
    checkValid(...args: any[]): any;
    setSelfTouchingRingFormingHoleValid(isValid: any): void;
    _isSelfTouchingRingFormingHoleValid: any;
    checkClosedRing(ring: any): any;
    checkShellsNotNested(mp: any, graph: any): any;
}
import TopologyValidationError from './TopologyValidationError.js';
