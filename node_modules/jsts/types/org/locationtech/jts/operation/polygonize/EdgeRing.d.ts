declare class EdgeRing {
    static constructor_(...args: any[]): void;
    static findEdgeRingContaining(testEr: any, erList: any): any;
    static addEdge(coords: any, isForward: any, coordList: any): void;
    static findDirEdgesInRing(startDE: any): ArrayList;
    constructor(...args: any[]);
    isIncluded(): any;
    getCoordinates(): any;
    _ringPts: any;
    build(startDE: any): void;
    isInRing(pt: any): boolean;
    addHole(...args: any[]): void;
    _holes: ArrayList;
    computeHole(): void;
    _isHole: boolean;
    getLocator(): IndexedPointInAreaLocator;
    _locator: IndexedPointInAreaLocator;
    getShell(): any;
    updateIncluded(): any;
    setShell(shell: any): void;
    _shell: any;
    setProcessed(isProcessed: any): void;
    _isProcessed: any;
    isIncludedSet(): boolean;
    isValid(): boolean;
    isOuterHole(): boolean;
    getPolygon(): any;
    isHole(): boolean;
    isProcessed(): any;
    setIncluded(isIncluded: any): void;
    _isIncluded: any;
    _isIncludedSet: boolean;
    getOuterHole(): any;
    hasShell(): boolean;
    isOuterShell(): boolean;
    getLineString(): any;
    toString(): string;
    add(de: any): void;
    getRing(): any;
    _ring: any;
}
declare namespace EdgeRing {
    export let _factory: any;
    export let _deList: ArrayList;
    export let _lowestEdge: any;
    export let _ring: any;
    export let _locator: any;
    export let _ringPts: any;
    export let _holes: any;
    export let _shell: any;
    export let _isHole: any;
    export let _isProcessed: boolean;
    export let _isIncludedSet: boolean;
    export let _isIncluded: boolean;
    export { EnvelopeComparator };
}
export default EdgeRing;
import ArrayList from '../../../../../java/util/ArrayList.js';
import IndexedPointInAreaLocator from '../../algorithm/locate/IndexedPointInAreaLocator.js';
declare class EnvelopeComparator {
    compare(obj0: any, obj1: any): any;
    get interfaces_(): (typeof Comparator)[];
}
import Comparator from '../../../../../java/util/Comparator.js';
