export default class PolygonizeGraph extends PlanarGraph {
    static constructor_(...args: any[]): void;
    static findLabeledEdgeRings(dirEdges: any): ArrayList;
    static getDegreeNonDeleted(node: any): number;
    static deleteAllEdges(node: any): void;
    static label(dirEdges: any, label: any): void;
    static computeNextCWEdges(node: any): void;
    static computeNextCCWEdges(node: any, label: any): void;
    static getDegree(node: any, label: any): number;
    static findIntersectionNodes(startDE: any, label: any): ArrayList;
    findEdgeRing(startDE: any): EdgeRing;
    computeDepthParity(...args: any[]): any;
    computeNextCWEdges(): void;
    addEdge(line: any): any;
    deleteCutEdges(): ArrayList;
    getEdgeRings(): ArrayList;
    getNode(pt: any): any;
    convertMaximalToMinimalEdgeRings(ringEdges: any): void;
    deleteDangles(): HashSet;
}
import PlanarGraph from '../../planargraph/PlanarGraph.js';
import EdgeRing from './EdgeRing.js';
import ArrayList from '../../../../../java/util/ArrayList.js';
import HashSet from '../../../../../java/util/HashSet.js';
