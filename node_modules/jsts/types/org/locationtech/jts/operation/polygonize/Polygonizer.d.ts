declare class Polygonizer {
    static constructor_(...args: any[]): void;
    static findOuterShells(shellList: any): void;
    static extractPolygons(shellList: any, includeAll: any): ArrayList;
    static findDisjointShells(shellList: any): void;
    constructor(...args: any[]);
    getGeometry(): any;
    _geomFactory: any;
    getInvalidRingLines(): ArrayList;
    findValidRings(edgeRingList: any, validEdgeRingList: any, invalidRingList: any): void;
    polygonize(): any;
    _polyList: ArrayList;
    _dangles: import("../../../../../java/util/HashSet.js").default;
    _cutEdges: ArrayList;
    _invalidRingLines: ArrayList;
    getDangles(): import("../../../../../java/util/HashSet.js").default;
    add(...args: any[]): void;
    _graph: PolygonizeGraph;
    setCheckRingsValid(isCheckingRingsValid: any): void;
    _isCheckingRingsValid: any;
    findShellsAndHoles(edgeRingList: any): void;
    _holeList: ArrayList;
    _shellList: ArrayList;
    getCutEdges(): ArrayList;
    getPolygons(): ArrayList;
}
declare namespace Polygonizer {
    export let _lineStringAdder: LineStringAdder;
    export let _graph: any;
    export let _dangles: ArrayList;
    export let _cutEdges: ArrayList;
    export let _invalidRingLines: ArrayList;
    export let _holeList: any;
    export let _shellList: any;
    export let _polyList: any;
    export let _isCheckingRingsValid: boolean;
    export let _extractOnlyPolygonal: any;
    export let _geomFactory: any;
    export { LineStringAdder };
}
export default Polygonizer;
import ArrayList from '../../../../../java/util/ArrayList.js';
import PolygonizeGraph from './PolygonizeGraph.js';
declare class LineStringAdder {
    static constructor_(...args: any[]): void;
    constructor(...args: any[]);
    filter(g: any): void;
    get interfaces_(): (typeof GeometryComponentFilter)[];
}
import GeometryComponentFilter from '../../geom/GeometryComponentFilter.js';
