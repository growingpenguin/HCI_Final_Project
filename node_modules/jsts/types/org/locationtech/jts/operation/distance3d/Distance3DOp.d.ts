export default class Distance3DOp {
    static constructor_(...args: any[]): void;
    static segmentPoint(p0: any, p1: any, d0: any, d1: any): Coordinate;
    static nearestPoints(g0: any, g1: any): any[];
    static polyPlane(poly: any): PlanarPolygon3D;
    static isWithinDistance(g0: any, g1: any, distance: any): boolean;
    static distance(g0: any, g1: any): any;
    constructor(...args: any[]);
    computeMinDistancePolygonPoint(polyPlane: any, point: any, flip: any): any;
    intersection(poly: any, line: any): Coordinate;
    computeMinDistancePolygonPolygon(poly0: any, poly1: any, flip: any): any;
    computeMinDistancePointPoint(point0: any, point1: any, flip: any): void;
    computeMinDistanceMultiMulti(g0: any, g1: any, flip: any): any;
    computeMinDistanceOneMulti(...args: any[]): any;
    computeMinDistanceLinePoint(line: any, point: any, flip: any): any;
    nearestLocations(): any;
    nearestPoints(): any[];
    computeMinDistancePolygonLine(poly: any, line: any, flip: any): any;
    computeMinDistance(...args: any[]): any;
    _minDistanceLocation: any;
    computeMinDistanceLineLine(line0: any, line1: any, flip: any): any;
    _minDistance: any;
    distance(): any;
    mostPolygonalIndex(): 1 | 0;
    computeMinDistancePolygonRings(poly: any, ringPoly: any, flip: any): any;
    updateDistance(dist: any, loc0: any, loc1: any, flip: any): void;
    _isDone: boolean;
}
import Coordinate from '../../geom/Coordinate.js';
import PlanarPolygon3D from './PlanarPolygon3D.js';
