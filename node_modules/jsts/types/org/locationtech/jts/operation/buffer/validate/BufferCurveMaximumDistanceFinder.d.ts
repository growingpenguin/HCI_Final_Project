declare class BufferCurveMaximumDistanceFinder {
    static constructor_(...args: any[]): void;
    constructor(...args: any[]);
    computeMaxMidpointDistance(curve: any): void;
    getDistancePoints(): any;
    findDistance(bufferCurve: any): any;
    computeMaxVertexDistance(curve: any): void;
}
declare namespace BufferCurveMaximumDistanceFinder {
    export let _inputGeom: any;
    export let _maxPtDist: PointPairDistance;
    export { MaxPointDistanceFilter };
    export { MaxMidpointDistanceFilter };
}
export default BufferCurveMaximumDistanceFinder;
import PointPairDistance from './PointPairDistance.js';
declare class MaxPointDistanceFilter {
    static constructor_(...args: any[]): void;
    constructor(...args: any[]);
    filter(pt: any): void;
    getMaxPointDistance(): any;
    get interfaces_(): (typeof CoordinateFilter)[];
}
declare class MaxMidpointDistanceFilter {
    static constructor_(...args: any[]): void;
    constructor(...args: any[]);
    filter(seq: any, index: any): any;
    isGeometryChanged(): boolean;
    getMaxPointDistance(): any;
    isDone(): boolean;
    get interfaces_(): (typeof CoordinateSequenceFilter)[];
}
import CoordinateFilter from '../../../geom/CoordinateFilter.js';
import CoordinateSequenceFilter from '../../../geom/CoordinateSequenceFilter.js';
