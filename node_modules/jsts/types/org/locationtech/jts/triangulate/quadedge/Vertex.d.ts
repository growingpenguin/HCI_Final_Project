declare class Vertex {
    static constructor_(...args: any[]): void;
    static interpolateZ(...args: any[]): any;
    constructor(...args: any[]);
    magn(): number;
    equals(...args: any[]): boolean;
    rightOf(e: any): boolean;
    isCCW(b: any, c: any): boolean;
    getX(): any;
    crossProduct(v: any): number;
    setZ(_z: any): void;
    times(c: any): Vertex;
    cross(): Vertex;
    leftOf(e: any): boolean;
    getY(): any;
    classify(p0: any, p1: any): number;
    circumRadiusRatio(b: any, c: any): number;
    circleCenter(b: any, c: any): Vertex;
    dot(v: any): number;
    getZ(): any;
    bisector(a: any, b: any): HCoordinate;
    getCoordinate(): any;
    isInCircle(a: any, b: any, c: any): boolean;
    interpolateZValue(v0: any, v1: any, v2: any): any;
    midPoint(a: any): Vertex;
    toString(): string;
    sub(v: any): Vertex;
    sum(v: any): Vertex;
    distance(v1: any, v2: any): number;
}
declare namespace Vertex {
    let _p: Coordinate;
    let LEFT: number;
    let RIGHT: number;
    let BEYOND: number;
    let BEHIND: number;
    let BETWEEN: number;
    let ORIGIN: number;
    let DESTINATION: number;
}
export default Vertex;
import HCoordinate from '../../algorithm/HCoordinate.js';
import Coordinate from '../../geom/Coordinate.js';
