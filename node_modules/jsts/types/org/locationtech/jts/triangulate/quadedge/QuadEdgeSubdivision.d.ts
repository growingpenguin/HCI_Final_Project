declare class QuadEdgeSubdivision {
    static constructor_(...args: any[]): void;
    static getTriangleEdges(startQE: any, triEdge: any): void;
    constructor(...args: any[]);
    getTriangleVertices(includeFrame: any): any;
    isFrameVertex(v: any): boolean;
    isVertexOfEdge(e: any, v: any): boolean;
    connect(a: any, b: any): QuadEdge;
    visitTriangles(triVisitor: any, includeFrame: any): void;
    isFrameEdge(e: any): boolean;
    isOnEdge(e: any, p: any): boolean;
    getEnvelope(): Envelope;
    getVertexUniqueEdges(includeFrame: any): ArrayList;
    locateFromEdge(v: any, startEdge: any): any;
    getVoronoiDiagram(geomFact: any): any;
    getTriangles(geomFact: any): any;
    getVoronoiCellPolygon(qe: any, geomFact: any): any;
    setLocator(locator: any): void;
    _locator: any;
    initSubdiv(): QuadEdge;
    isFrameBorderEdge(e: any): boolean;
    makeEdge(o: any, d: any): QuadEdge;
    createFrame(env: any): void;
    _frameEnv: Envelope;
    getTriangleCoordinates(includeFrame: any): any;
    getVertices(includeFrame: any): HashSet;
    fetchTriangleToVisit(edge: any, edgeStack: any, includeFrame: any, visitedEdges: any): any;
    getEdges(...args: any[]): any;
    getTriangleEdges(includeFrame: any): any;
    getPrimaryEdges(includeFrame: any): ArrayList;
    delete(e: any): void;
    getTolerance(): any;
    getVoronoiCellPolygons(geomFact: any): ArrayList;
    insertSite(v: any): any;
    locate(...args: any[]): any;
}
declare namespace QuadEdgeSubdivision {
    export let _visitedKey: number;
    export let _quadEdges: ArrayList;
    export let _startingEdge: any;
    export let _tolerance: any;
    export let _edgeCoincidenceTolerance: number;
    export let _frameVertex: any;
    export let _frameEnv: any;
    export let _locator: LastFoundQuadEdgeLocator;
    export let _seg: LineSegment;
    export let _triEdges: any;
    export { TriangleCircumcentreVisitor };
    export { TriangleEdgesListVisitor };
    export { TriangleVertexListVisitor };
    export { TriangleCoordinatesVisitor };
    export let EDGE_COINCIDENCE_TOL_FACTOR: number;
}
export default QuadEdgeSubdivision;
import QuadEdge from './QuadEdge.js';
import Envelope from '../../geom/Envelope.js';
import ArrayList from '../../../../../java/util/ArrayList.js';
import HashSet from '../../../../../java/util/HashSet.js';
import LastFoundQuadEdgeLocator from './LastFoundQuadEdgeLocator.js';
import LineSegment from '../../geom/LineSegment.js';
declare class TriangleCircumcentreVisitor {
    visit(triEdges: any): void;
    get interfaces_(): (typeof TriangleVisitor)[];
}
declare class TriangleEdgesListVisitor {
    static constructor_(): void;
    constructor(...args: any[]);
    getTriangleEdges(): any;
    visit(triEdges: any): void;
    get interfaces_(): (typeof TriangleVisitor)[];
}
declare class TriangleVertexListVisitor {
    static constructor_(): void;
    constructor(...args: any[]);
    getTriangleVertices(): any;
    visit(triEdges: any): void;
    get interfaces_(): (typeof TriangleVisitor)[];
}
declare class TriangleCoordinatesVisitor {
    static constructor_(): void;
    constructor(...args: any[]);
    checkTriangleSize(pts: any): void;
    visit(triEdges: any): any;
    getTriangles(): any;
    get interfaces_(): (typeof TriangleVisitor)[];
}
import TriangleVisitor from './TriangleVisitor.js';
