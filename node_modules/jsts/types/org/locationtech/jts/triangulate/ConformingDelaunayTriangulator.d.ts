declare class ConformingDelaunayTriangulator {
    static constructor_(...args: any[]): void;
    static computeVertexEnvelope(vertices: any): Envelope;
    constructor(...args: any[]);
    getInitialVertices(): any;
    getKDT(): any;
    setConstraints(segments: any, segVertices: any): void;
    _segments: any;
    _segVertices: any;
    computeConvexHull(): void;
    _convexHull: any;
    addConstraintVertices(): void;
    getTolerance(): any;
    setVertexFactory(vertexFactory: any): void;
    _vertexFactory: any;
    formInitialDelaunay(): void;
    _subdiv: QuadEdgeSubdivision;
    _incDel: IncrementalDelaunayTriangulator;
    insertSite(...args: any[]): any;
    enforceConstraints(): void;
    insertSites(vertices: any): void;
    getVertexFactory(): any;
    getPointArray(): any;
    findNonGabrielPoint(seg: any): any;
    getConstraintSegments(): any;
    setSplitPointFinder(splitFinder: any): void;
    _splitFinder: any;
    getConvexHull(): any;
    enforceGabriel(segsToInsert: any): number;
    _splitPt: any;
    createVertex(...args: any[]): any;
    getSubdivision(): QuadEdgeSubdivision;
    computeBoundingBox(): void;
    _computeAreaEnv: Envelope;
}
declare namespace ConformingDelaunayTriangulator {
    let _initialVertices: ArrayList;
    let _segVertices: any;
    let _segments: ArrayList;
    let _subdiv: any;
    let _incDel: any;
    let _convexHull: any;
    let _splitFinder: NonEncroachingSplitPointFinder;
    let _kdt: KdTree;
    let _vertexFactory: any;
    let _computeAreaEnv: any;
    let _splitPt: any;
    let _tolerance: any;
    let MAX_SPLIT_ITER: number;
}
export default ConformingDelaunayTriangulator;
import QuadEdgeSubdivision from './quadedge/QuadEdgeSubdivision.js';
import IncrementalDelaunayTriangulator from './IncrementalDelaunayTriangulator.js';
import Envelope from '../geom/Envelope.js';
import ArrayList from '../../../../java/util/ArrayList.js';
import NonEncroachingSplitPointFinder from './NonEncroachingSplitPointFinder.js';
import KdTree from '../index/kdtree/KdTree.js';
