declare class GeometricShapeFactory {
    static constructor_(...args: any[]): void;
    constructor(...args: any[]);
    setBase(base: any): void;
    setRotation(radians: any): void;
    _rotationAngle: any;
    setWidth(width: any): void;
    createEllipse(): any;
    createArc(startAng: any, angExtent: any): any;
    rotate(geom: any): any;
    coord(x: any, y: any): Coordinate;
    createArcPolygon(startAng: any, angExtent: any): any;
    createRectangle(): any;
    createCircle(): any;
    setHeight(height: any): void;
    setSize(size: any): void;
    createSupercircle(power: any): any;
    setNumPoints(nPts: any): void;
    _nPts: any;
    coordTrans(x: any, y: any, trans: any): Coordinate;
    createSquircle(): any;
    setEnvelope(env: any): void;
    setCentre(centre: any): void;
}
declare namespace GeometricShapeFactory {
    export let _geomFact: any;
    export let _precModel: any;
    export let _dim: Dimensions;
    export let _nPts: number;
    export let _rotationAngle: number;
    export { Dimensions };
}
export default GeometricShapeFactory;
import Coordinate from '../geom/Coordinate.js';
declare class Dimensions {
    static constructor_(): void;
    constructor(...args: any[]);
    setBase(base: any): void;
    base: any;
    setWidth(width: any): void;
    width: any;
    getBase(): any;
    getWidth(): any;
    getEnvelope(): Envelope;
    getCentre(): any;
    centre: any;
    getHeight(): any;
    setHeight(height: any): void;
    height: any;
    setSize(size: any): void;
    setEnvelope(env: any): void;
    setCentre(centre: any): void;
    getMinSize(): number;
}
import Envelope from '../geom/Envelope.js';
